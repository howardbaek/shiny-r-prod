{
  "hash": "90b89c0a71110d66dcad800485d33fe1",
  "result": {
    "markdown": "---\ntitle: \"Performance\"\nsubtitle: \"posit::conf(2023) <br> Shiny in Production: Tools & Techniques\"\nfooter: \"[{{< var workshop_short_url >}}]({{< var workshop_full_url >}})\"\nformat:\n  revealjs:\n    theme: [default, ../slides.scss] # moon= teal bg  |  dark\n    scrollable: true\n    incremental: false\n    slide-number: c/t # c/t | c | h/v | h.v\n    slide-tone: false #true\n    code-line-numbers: false\n    history: false\nrevealjs-plugins:\n  - codewindow\n---\n\n\n## Performance Agenda\n\n* Profiling your Shiny app with {profvis}\n* Lightning-quick data loading/querying with {arrow} & *.parquet* files\n* Asynchronous processes with {crew}\n\n# {profvis}: an R package for profiling R code <br>(including Shiny apps)\n\n## What is {profvis}?\n\nR package for visualizing how (and how fast/slow) your R code runs\n\n[{profvis} website](https://rstudio.github.io/profvis/index.html)\n\n![](assets/img/example_profvis_report.png)\n\n::: {.notes}\n* The package is from Posit\n* Help you understand the bottlenecks in your R code\n* and, you guessed it, it works with Shiny too\n:::\n\n## Working with {profvis} & {golem} {auto-animate=true}\n\nOur `dev/run_dev.R` script is where we can profile our app interactively.\n\n```{.r}\noptions(golem.app.prod = FALSE)\n\ngolem::detach_all_attached()\n\ngolem::document_and_reload()\n\nrun_app()\n```\n## Working with {profvis} & {golem} {auto-animate=true}\n\nOur `dev/run_dev.R` script is where we can profile our app interactively.\n\n```{.r}\noptions(golem.app.prod = FALSE)\n\ngolem::detach_all_attached()\n\ngolem::document_and_reload()\n\nprofvis::profvis({\n  print(run_app())\n})\n```\n\n::: {.notes}\nYou need to wrap the `run_app()` function in `print()`, before passing it to `profvis::profvis()`\n:::\n\n## Demo!\n\n![](assets/img/myspace_meme.png)\n\n::: {.notes}\n- Show how to change the `dev/run_dev.R` script to enable {profvis} profiling\n- Launch the app, navigate to the \"Overview\" page, and change a filter\n- Stop the app, and wait for the report to load\n- Describe the flamegraph, change the filters to only show events that took time\n- Navigate to the 'data' tab and discuss what took the most time\n:::\n\n## Your Turn: [Exercise 1](ex-1.html){target=\"_blank\"}\n\nProfile the LEGO Bricks app!\n\n* [Details](ex-1.html){target=\"_blank\"}\n* Posit Cloud project: **Performance Exercise 1**\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_587a355c\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# {arrow} & the *.parquet* file format\n\n## What are *.parquet* files?\n\n* *.parquet* is a *columnar* storage format\n* *.parquet* files not only store data, but they also store metadata about your data (i.e., data types for each column, number of rows in the file, etc.)\n* Smaller files\n* Faster read speed\n\n::: {.notes}\n- HOT TAKE INCOMING: parquet is the new csv\n- parquet files typically are the data structure that lives behind projects like the open source Delta Lake\n- faster across pretty much all benchmarks\n:::\n\n## What is the {arrow} R package?\n\n* Part of the larger Apache Arrow project\n* Connect to your data with {arrow}...\n* ... and query it with {dplyr}\n\n. . .\n\n[Apache Arrow Homepage](https://arrow.apache.org/)\n\n[Shiny + Arrow Article](https://posit.co/blog/shiny-and-arrow/)\n\n::: {.notes}\n- \"multi-language toolbox for accelerated data interchange and in-memory processing\"\n- I.e., a set of data manipulation standards (particularly against parquet files) that has been implemented in a bunch of languages including R, Python, Rust, Go, and more\n- {arrow} let's you use {dplyr} verbs against a single parquet file (or, perhaps more importantly, a *set* of parquet files) to query the data in those files\n- When it comes to building Shiny apps, we should look for easy places where we can gain efficiency & speed to improve our user experience (you don't want users waiting 20 seconds for your data prep logic to run against a single massive csv); it's very likely that the combination of .parquet + {arrow} + {dplyr} can meet your app performance needs (it does for at least 95% of my use cases -- there are very few cases where I have to go beyond that and start looking into other engines for faster data manipulation)\n:::\n\n# Code-Along {background-color=\"#17395c\"}\n\nUsing `.parquet` in the LEGO Bricks Shiny app\n\n* [Details](codealong-1.html){target=\"_blank\"}\n* Posit Cloud project: **Performance Exercise 1**\n\n# Async Processing\n\n## Single (threaded) Line {background-image=\"assets/img/lego_line_pay.jpg\" background-size=\"cover\"}\n\n* A single R process managing the different tasks in a Shiny application\n* Executed one-by-one\n\n# Should I care? It Depends ...\n\n# If you are the __only__ user for a quick and efficient app: Likely not!\n\n## Crowd Pleaser\n\nMultiple users accessing the app __concurrently__: \n\n* Single-threaded R process serving multiple users in typical deployments\n\n## Asynchronous Processing (circa 2018)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n### ðŸ“¦ [`{promises}`](https://rstudio.github.io/promises/index.html)\n\nHandle objects representing the (eventual) result of an async operation\n\n:::\n\n::: {.column width=\"50%\"}\n\n### ðŸ“¦ [`{future}`](https://future.futureverse.org/)\n\nLaunch tasks without blocking current R session\n\n:::\n\n::::\n\n::: footer\n[Using promises with Shiny](https://rstudio.github.io/promises/articles/promises_06_shiny.html)\n:::\n\n## Introducing [`{crew}`](https://wlandau.github.io/crew/)\n\n> A distributed worker launcher for asynchronous tasks\n\n* Extends use of the [mirai](https://github.com/shikokuchuo/mirai) task scheduler to multiple computing backends\n* Central controller object manages tasks (scales on fly)\n* Supports multiple [controller groups](https://wlandau.github.io/crew/articles/controller_groups.html) for specialized worker types\n* Fits nicely with [`{targets}`](https://docs.ropensci.org/targets/) and ...\n\n. . .\n\n![](assets/img/shiny.png){.absolute top=0 left=200}\n\n## Watch-Along {background-color=\"#17395c\"}\n\nUsing `{crew}` inside a Shiny application:\n\n* Vignette: <https://wlandau.github.io/crew/articles/shiny.html>\n* Application: <https://wlandau.shinyapps.io/crew-shiny>\n\n## Setting up for Success\n\n1. Create functions for long-running tasks\n1. Create multiple [`reactiveVal`](https://shiny.posit.co/r/reference/shiny/latest/reactiveval) objects for bookkeeping\n1. Set up a `{crew}` controller \n1. Establish an event-driven push of task to the controller with monitoring of worker status\n\n# Code-Along {background-color=\"#17395c\"}\n\nAsynchronous calls of a model prediction API.\n\n* [Details](codealong-2.html){target=\"_blank\"}\n* Posit Cloud project: **Performance Code-along 2**\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}