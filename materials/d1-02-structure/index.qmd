---
title: "Application Structure"
title-slide-attributes: 
  data-background-image: assets/img/lego_city.jpg
  data-background-size: contain
  data-background-opacity: "0.3"
subtitle: "posit::conf(2023) <br> Shiny in Production: Tools & Techniques"
footer: "[{{< var workshop_short_url >}}]({{< var workshop_full_url >}})"
format: 
  revealjs:
    theme: [default, ../slides.scss] # moon= teal bg  |  dark
    scrollable: true
    incremental: true
    slide-number: c/t # c/t | c | h/v | h.v
    slide-tone: false #true
    code-line-numbers: false
    history: false
---

## It's Never Just Shiny

... at least for production-quality apps!

* External data sources
* Connections to other execution backends
* Additional R packages!

## Turned Upside-Down

Imagine your application is working great!

<br>

. . . 

:::: {.columns .v-center-container}

::: {.column width="50%"}

```r
update.packages(ask = FALSE)
remotes::install_github("pkg")
```

:::

::: {.column width="50%}

![](https://rfortherestofus.com/wp-content/uploads/2020/09/update-packages-prompt.png)

:::

::::

## Turned Upside-Down

:::: {.columns .v-center-container}

::: {.column width="50%"}

`ggplot2` version `0.9.3`

![](assets/img/computer_user_happy.png){width="60%"}

:::

::: {.column width="50%"}

`ggplot2` version `1.0.0`

![](http://i.giphy.com/RhEvCHIeZAZ6E.gif)

:::

::::

## Take Control with [`{renv}`](https://rstudio.github.io/renv/)

> Create **r**eproducible **env**ironments for your R projects.

* Next generation of `{packrat}`
* Isolated package library from rest of your system
* Transfer projects to different collaborators / platforms
* **Reproducible** package installation 
* Easily create new projects or convert existing projects with RStudio or built-in functions.

## Under the Hood

Upon initializing a project:

1. Project-level `.Rprofile` to activate custom package library on startup
1. Lockfile `renv.lock` to describe state of project library
1. `renv/library` to hold private project library
1. `renv/activate.R` performs activation

## Develop a Routine

Sticking with `{renv}` will pay off (trust me)

* Fair play to mix packages from CRAN, GitHub, and proprietary sources
* Roll back when a package upgrade doesn't play nicely
* **You** make the call when to update your library!

# Application Structure Options

## A Single Point: `app.R`

Prototype apps can coast by with a single `app.R`

* More inputs, visualizations, modules, tabs ...
* Eventually the `app.R` almost explodes
* Difficult to collaborate without conflicts

## `R` Directory

* Shiny supports auto-loading scripts in an `R` directory
* Nested directories not supported
* More information on the [App Formats](https://shiny.rstudio.com/articles/app-formats.html ) article

## Enter the [`{golem}`](https://thinkr-open.github.io/golem/)

> Opinionated framework for building production-grade Shiny applications as **R packages**

* Scripts guide you with first steps akin to `{usethis}` & `{devtools}`
* Encourages Shiny best practices (especially **modules**)
* Streamlines deployment on multiple platforms

::: {.notes}
Additional content on golem goes here. Remove this note when finished.
:::

# All About Modules

## What are Modules?

. . .

### Building blocks to compose any Shiny app out of smaller, more understandable pieces

* Avoids namespace collisions when using same widget across different areas of your app
* Allow you to encapsulate distinct app interfaces
* Organize code into logical and easy-to-understand components
* Facilitate collaboration

## Sound familiar?

* R functions also help avoid collisions in variable names with general R code
* Essential for creating non-trivial and extensive workflows

# Module Code Example

::: {.notes}
Change the example code below to match LEGO data. Delete this note when finished.
:::

## Anatomy of a Function (UI) {auto-animate=true}

:::: {.columns}

::: {.column width="60%"}
```r
set_picker_ui <- function() {
  tagList(
    selectInput(
      inputId = "set_num",
      label = "Select a set"
      choices = c("set1", "set2"),
      selected = "set1",
      multiple = FALSE
    )
  )
}
```
:::

::: {.column width="40%"}

:::

::::

## Anatomy of a Module (UI) {auto-animate=true}

:::: {.columns}

::: {.column width="60%"}

```r
set_picker_ui <- function(id) {
  ns <- NS(id)
  tagList(
    selectInput(
      inputId = ns("set_num"),
      label = "Select a set"
      choices = c(),
      multiple = FALSE
    )
  )
}
```
:::

::: {.column width="40%"}

:::

::::

## Anatomy of a Module (UI)

:::: {.columns}

::: {.column width="60%"}


```{.r code-line-numbers="1,2,5"}
set_picker_ui <- function(id) {
  ns <- NS(id)
  tagList(
    selectInput(
      inputId = ns("set_num"),
      label = "Select a set"
      choices = c(),
      multiple = FALSE
    )
  )
}
```

:::

::: {.column width="40%"}

* `id`: String to use for namespace
* `ns <- NS(id)`: Create proper namespace function

:::

::::

## Anatomy of a Module (Server) {auto-animate=true}

:::: {.columns}

::: {.column width="75%"}

```r
set_picker_server <- function(input, output, session, sets_rv) {
  set_choices <- reactive({
    # do something with sets_rv
  })

  observeEvent(set_choices(), {
    req(set_choices())
    updateSelectInput(
      "set_num",
      choices = set_choices()
    )
  })
}
```

:::

::: {.column width="25%"}

:::

::::

## Anatomy of a Module (Server) {auto-animate=true}

:::: {.columns}

::: {.column width="75%"}

```r
set_picker_server <- function(id, sets_rv) {
  moduleServer(
    id,
    function(input, output, session) {
      set_choices <- reactive({
        # do something with sets_rv
      })

      observeEvent(set_choices(), {
        req(set_choices())
        updateSelectInput(
          "set_num",
          choices = set_choices()
        )
      })
    }
  )
}
```

:::

::: {.column width="25%"}

Minimal changes necessary

:::

::::

## Anatomy of a Module (Server) {auto-animate=true}

:::: {.columns}

::: {.column width="70%"}

```{.r code-line-numbers="1,2"}
set_picker_server <- function(id, sets_rv) {
  moduleServer(
    id,
    function(input, output, session) {
      set_choices <- reactive({
        # do something with sets_rv
      })

      observeEvent(set_choices(), {
        req(set_choices())
        updateSelectInput(
          "set_num",
          choices = set_choices()
        )
      })
    }
  )
}
```

:::

::: {.column width="30%"}

:thinking: `id`

:::

::::

* ``moduleServer()`: Encapsulate server-side logic with namespace applied.

## Invoking Modules

```{.r}
library(shiny)
library(bslib)
ui <- page_fluid(
  set_picker_ui("mod1")
)

server <- function(input, output, session) {
  sets_rv <- reactive({
    # processing
  })

  set_picker_server("mod1", sets_rv)
}

shinyApp(ui, server)
```

## Giving and Receiving 

:::: {.columns}

::: {.column width="60%"}

```r
set_picker_ui <- function(id, label = "Select a set") {
  ns <- NS(id)
  tagList(
    selectInput(
      inputId = ns("set_num"),
      label = label,
      choices = c(),
      multiple = FALSE
    )
  )
}
```
:::

::: {.column width="40%"}

* Reasonable inputs: static values, vectors, flags
* Avoid **reactive** parameters
* Return value: `tagList()` of inputs, output placeholders, and other UI elements 

:::

::::

## Giving and Receiving 

```{.r}
set_picker_server <- function(id, sets_rv) {
  moduleServer(
    id,
    function(input, output, session) {
      set_choices <- reactive({
        # do something with sets_rv
      })

      observeEvent(set_choices(), {
        req(set_choices())
        updateSelectInput(
          "set_num",
          choices = set_choices()
        )
      })
    }
  )
}
```

* Input parameters (and return values) can be a mix of static and **reactive** objects

## To () or not to () {.smaller}

:::: {.columns}

::: {.column width="40%"}

```{.r}
# app server
sets_rv <- reactive({
  # processing
})

set_picker_server("mod1", sets_rv)
```

:::

::: {.column width="60%"}

```{.r}
set_picker_server <- function(id, sets_rv) {
  moduleServer(
    id,
    function(input, output, session) {
      set_choices <- reactive({
        # do something with sets_rv
      })

      observeEvent(set_choices(), {
        req(set_choices())
        updateSelectInput(
          "set_num",
          choices = set_choices()
        )
      })

      set_selection  <- reactive({
        input$set_num
      })

      set_selection
    }
  )
}
```

:::

::::

* Reactive parameters reference by **name**: `sets_rv`
* Inside module, **invoke** reactive parameter as you would any other reactive in Shiny: `sets_rv()`
* Any reactive(s) returned by module should also be reference by **name**: `set_selection`,  ~~`set_selection()`~~
