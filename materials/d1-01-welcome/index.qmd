---
title: "Welcome!"
title-slide-attributes:
  data-background-image: assets/img/bg/rstudioconf_crowd.jpg
  data-background-size: cover
  data-background-opacity: "0.3"
subtitle: "Shiny in Production: Tools & Techniques <br> posit::conf(2023)"
footer: "[{{< var workshop_short_url >}}]({{< var workshop_full_url >}})"
format: 
  revealjs:
    theme: [default, ../slides.scss] # moon= teal bg  |  dark
    css: assets/web/postit.css
    scrollable: true
    incremental: false
    slide-number: c/t # c/t | c | h/v | h.v
    show-slide-number: print
    slide-tone: false #true
    code-line-numbers: false
    history: false
---

## Conference Logistics {visibility="hidden"}

::: {.nonincremental}
1. Identify the exits closes to you in case of emergency
1. Gender neutral bathrooms located {{< var bathrooms_location >}}
1. Lactation room located at {{< var lactation_location >}}
1. A meditation room is available at {{< var quiet_location >}} (Open 8 AM - 5 PM).
1. Please do not photograph anyone wearing red lanyards
:::

## Workshop Policies 

::: {.nonincremental}
1. Please review the `posit::conf` [Code of Conduct](https://posit.co/code-of-conduct/).
1. Issues can be addressed in following ways:
     1. **In person:** Contact any `posit::conf` staff member, identifiable by their staff t-shirt shirt, or visit the conference registration desk.
     1. **By email:** Send a message to `conf@posit.com`; event organizers will respond promptly.
     1. **By phone:** call `844—448—1212`

:::

## Meet the Team! {.smaller}

:::: {.columns}

::: {.column width="50%"}
![](assets/img/people/enantz.jpg){fig-alt="Eric Nantz" fig-align="center" width="70%"}

* `r fontawesome::fa("microphone")` [r-podcast.org](https://r-podcast.org)
* `r fontawesome::fa("camera")` [shinydevseries.com](https://shinydevseries.com)
* `r fontawesome::fa("microphone")` [rweekly.org/podcast](https://rweekly.org/podcast)

:::

::: {.column width="50%"}
![](assets/img/people/mthomas.jpeg){fig-alt="Michael Thomas" fig-align="center"}

* `r fontawesome::fa("link")` [www.ketchbrookanalytics.com/](https://www.ketchbrookanalytics.com)
* `r fontawesome::fa("microphone")` [rweekly.org/podcast](https://rweekly.org/podcast)
:::

::::

::: footer
[posit-conf-2023.github.io/shiny-r-prod/#workshop-instructors](https://posit-conf-2023.github.io/shiny-r-prod/#workshop-instructors)
:::
---

:::: {.columns .v-center-container}

::: {.column width="23%"}

### WiFi

<br> 

`r fontawesome::fa("wifi", height="3em", fill = "blue")`

<br>

### `{{< var wifi_username >}}`

:::

::: {.column width="47%"}

![](assets/img/bg/surf_internet.jpg)

:::

::: {.column width="30%"}

### Password

<br>

`r fontawesome::fa("key", height="3em", fill = "blue")`

<br>

### `{{< var wifi_password >}}`

:::

::::

## About those post-its

:::: {.columns .v-center-container}

::: {.column width="50%"}

```{=html}
<ul id="notes-green">
    <li>
        <p>Done with activity</p>
    </li>
</ul>
```

:::

::: {.column width="50%"}

```{=html}
<ul id="notes-pink">
    <li>
        <p>I'd like help</p>
    </li>
</ul>
```

:::

:::

## Your Turn

Complete any remaining [Setup Procedures](../setup.qmd)

* Posit Cloud
* Posit Connect
* Account Integrations

Introduce yourself to your neighbor(s)

What is your most memorable Shiny application in production experience?

```{r}
#| label: timer-prodquality
library(countdown)
countdown(minutes = 5, seconds = 0)
```

::: footer
[posit-conf-2023.github.io/shiny-r-prod/setup.html](https://posit-conf-2023.github.io/shiny-r-prod/setup.html)
:::

# The Beginning ... {background-color="black" background-image="assets/img/bg/beginning.png" background-size="cover"}

::: footer

:::

::: {.notes}
* You've seen Shiny could be a game-changer for a project
* Build an application quickly, purely with R code
* You send it to a key stakeholder, and they love it
:::

# A New World {background-image="assets/img/bg/metroid_ship.jpg" background-size="cover" background-color="black"}

::: footer

:::

::: {.notes}
* Everyone who sees it thinks the app is amazing
* Suddenly you are asked (or told) this needs to get into PRODUCTION
* ..... and now what?
:::


## Many Users {background-image="assets/img/bg/many_users.jpg" background-size="contain" background-color="black"}

::: footer

:::

## High-Profile Situations {background-image="assets/img/bg/nasa_mission_control.jpg" background-size="contain" background-color="black"}

::: footer

:::

## Part of a Critical Pipeline {background-image="assets/img/bg/pinky_brain_take_over_world.jpg" background-size="contain" background-color="black"}

::: footer

:::

## The Journey Ahead

<br> 

**Production** has more than one meaning for Shiny apps

. . .

<br>

The tooling & principles discussed in this workshop will guide you to the destination

# The Challenge

## Rebrickable Inventory Dashboard

* Rebrickable: Portal for LEGO builders to discover what sets they can build with their own inventory
* A comprehensive database of LEGO items available for free!
* We will build a Shiny dashboard to explore the inventory and enable users to generate predictions

::: footer
[rebrickable.com](https://rebrickable.com)
:::

## {background-image="assets/img/bg/rebrickable_schema.png" background-size="cover"}

::: footer

:::

## Applied Example {background-image="https://cdn.rebrickable.com/media/sets/42138-1.jpg" background-size="contain"}

::: footer
[Ford Mustang Shelby GT500](https://rebrickable.com/sets/42138-1/ford-mustang-shelby-gt500/?inventory=1#parts)
:::

## Raw Data

```{r}
#| label: example-brick-data
library(dplyr)
library(reactable)
library(reactablefmtr)

options(reactable.theme = reactableTheme(
    tableStyle = list(fontSize = 18),
    headerStyle = list(fontSize = 20),
    paginationStyle = list(fontSize = 16)
))

df_sets <- readRDS("../../data_examples/df_sets.rds")
df_inventories <- readRDS("../../data_examples/df_inventories.rds")
df_inventory_parts <- readRDS("../../data_examples/df_inventory_parts.rds")
df_parts <- readRDS("../../data_examples/df_parts.rds")
```

::: {.panel-tabset}

### sets

```{r}
#| label: example-df-sets

# filter for set_num == "42138-1" (Ford Mustang Shelby GT500)
df_sets <- df_sets |> 
  filter(set_num == "42138-1")
reactable(
    df_sets, 
    compact = TRUE,
    columns = list(
        set_num = colDef(
            maxWidth = 100
        ),
        name = colDef(
            maxWidth = 200
        ),
        year = colDef(
            maxWidth = 100
        ),
        theme_id = colDef(
            maxWidth = 100
        ),
        num_parts = colDef(
            maxWidth = 90
        ),
        img_url = colDef(
            maxWidth = 400
        )
    )
)
```

### inventories

```{r}
#| label: example-df-inventories

# filter for set_num == "42138-1" (Ford Mustang Shelby GT500)
df_inventories <-  df_inventories |> 
  filter(set_num == "42138-1")
reactable(
    df_inventories, 
    compact = TRUE
)
```

### inventory parts

```{r}
#| label: example-df-inventory-parts

# filter for inventory_id == "118871" 
df_inventory_parts <- df_inventory_parts |> 
  filter(inventory_id == 118871)
reactable(
    df_inventory_parts, 
    compact = TRUE,
    columns = list(
        inventory_id = colDef(
            maxWidth = 100
        ),
        part_num = colDef(
            maxWidth = 100
        ),
        color_id = colDef(
            maxWidth = 100
        ),
        quantity = colDef(
            maxWidth = 100
        ),
        is_spare = colDef(
            maxWidth = 90
        ),
        img_url = colDef(
            maxWidth = 400
        )
    )
)
```

### parts

```{r}
#| label: example-df-parts

df_parts <- df_parts |> 
  filter(part_num %in% unique(df_inventory_parts$part_num))

reactable(
    df_parts, 
    compact = TRUE,
    columns = list(
        part_num = colDef(
            maxWidth = 100
        ),
        name = colDef(
            maxWidth = 400
        ),
        part_cat_id = colDef(
            maxWidth = 100
        ),
        part_material = colDef(
            maxWidth = 200
        )
    )
)
```

:::

## Our Journey to Production

* Create a robust infrastructure for application source code
* Identify and solve performance bottlenecks
* Ensure app is only doing the "bare minimum" for a snappy user experience
* Tune deployment to meet demand of potentially many simultaneous users